ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
visualiser_forecast_d(2.3,1.3)
visualiser_forecast_d <- function(x, y = NULL) {
get_gps_coordonnee <- function(adresse) {
adresse_tibble <- tibble::tribble(
~addr,
adresse
) |>
tidygeocoder::geocode(addr)
lat <- adresse_tibble$lat
long <- adresse_tibble$long
coordonnees <- c(lat, long)
return(coordonnees)
}
if (is.numeric(x) && is.numeric(y)) {
data <- get_forecast(x, y)
} else if (is.character(x)) {
coordonnees <- get_gps_coordonnee(x)
data <- get_forecast(coordonnees[1], coordonnees[2])
} else {
stop("Les arguments ne sont ni des coordonnées numériques ni une adresse valide.")
}
data_long <- tidyr::pivot_longer(data, cols = c(temperature_celsius, apparent_temperature_celsius, precipitation_proba, precipitation), names_to = "variable", values_to = "value")
data_long$date_heure <- as.POSIXct(data_long$date_heure, format = "%Y-%m-%dT%H:%M", tz = "UTC")
data_long$date <- as.Date(data_long$date_heure)
data_long$day_of_week <- weekdays(data_long$date)
data_aggregated <- data_long |>
group_by(date, day_of_week, variable) |>
summarise(value = mean(value, na.rm = TRUE))
ggplot2::ggplot(data_aggregated, aes(x = paste(date, day_of_week), y = value, fill = variable)) +
ggplot2::geom_bar(stat = "identity", position = "dodge", width = 0.7) +
ggplot2::geom_text(aes(label = round(value, 1), y = value + 0.1), position = position_dodge(width = 0.7), vjust = -0.5) +
ggplot2::labs(title = "Prévisions Météo",
x = "Date et Jour",
y = "Valeur") +
ggplot2::facet_wrap(~variable, scales = "free_y", ncol = 1) +
ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
visualiser_forecast_d(2.3,1.3)
visualiser_forecast_d <- function(x, y = NULL) {
get_gps_coordonnee <- function(adresse) {
adresse_tibble <- tibble::tribble(
~addr,
adresse
) |>
tidygeocoder::geocode(addr)
lat <- adresse_tibble$lat
long <- adresse_tibble$long
coordonnees <- c(lat, long)
return(coordonnees)
}
if (is.numeric(x) && is.numeric(y)) {
data <- get_forecast(x, y)
} else if (is.character(x)) {
coordonnees <- get_gps_coordonnee(x)
data <- get_forecast(coordonnees[1], coordonnees[2])
} else {
stop("Les arguments ne sont ni des coordonnées numériques ni une adresse valide.")
}
data_long <- tidyr::pivot_longer(data, cols = c(temperature_celsius, apparent_temperature_celsius, precipitation_proba, precipitation), names_to = "variable", values_to = "value")
data_long$date_heure <- as.POSIXct(data_long$date_heure, format = "%Y-%m-%dT%H:%M", tz = "UTC")
data_long$date <- as.Date(data_long$date_heure)
data_long$day_of_week <- weekdays(data_long$date)
data_aggregated <- data_long |>
group_by(date, day_of_week, variable) |>
summarise(value = mean(value, na.rm = TRUE))
ggplot2::ggplot(data_aggregated, aes(x = paste(date, day_of_week), y = value, fill = variable)) +
ggplot2::geom_bar(stat = "identity", position = "dodge", width = 0.7) +
ggplot2::geom_text(aes(label = round(value, 1), y = value - 0.1), position = position_dodge(width = 0.7), vjust = 1.5) +
ggplot2::labs(title = "Prévisions Météo",
x = "Date et Jour",
y = "Valeur") +
ggplot2::facet_wrap(~variable, scales = "free_y", ncol = 1) +
ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
visualiser_forecast_d(2.3,1.3)
visualiser_forecast_d <- function(x, y = NULL) {
get_gps_coordonnee <- function(adresse) {
adresse_tibble <- tibble::tribble(
~addr,
adresse
) |>
tidygeocoder::geocode(addr)
lat <- adresse_tibble$lat
long <- adresse_tibble$long
coordonnees <- c(lat, long)
return(coordonnees)
}
if (is.numeric(x) && is.numeric(y)) {
data <- get_forecast(x, y)
} else if (is.character(x)) {
coordonnees <- get_gps_coordonnee(x)
data <- get_forecast(coordonnees[1], coordonnees[2])
} else {
stop("Les arguments ne sont ni des coordonnées numériques ni une adresse valide.")
}
data_long <- tidyr::pivot_longer(data, cols = c(temperature_celsius, apparent_temperature_celsius, precipitation_proba, precipitation), names_to = "variable", values_to = "value")
data_long$date_heure <- as.POSIXct(data_long$date_heure, format = "%Y-%m-%dT%H:%M", tz = "UTC")
data_long$date <- as.Date(data_long$date_heure)
data_long$day_of_week <- weekdays(data_long$date)
data_aggregated <- data_long |>
group_by(date, day_of_week, variable) |>
summarise(value = mean(value, na.rm = TRUE))
ggplot2::ggplot(data_aggregated, aes(x = paste(date, day_of_week), y = value, fill = variable)) +
ggplot2::geom_bar(stat = "identity", position = "dodge", width = 0.7) +
ggplot2::geom_text(aes(label = round(value, 1)), position = position_stack(vjust = 0.5), size = 3) +
ggplot2::labs(title = "Prévisions Météo",
x = "Date et Jour",
y = "Valeur") +
ggplot2::facet_wrap(~variable, scales = "free_y", ncol = 1) +
ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
visualiser_forecast_d(2.3,1.3)
devtools::document()
devtools::check()
devtools::build()
library(weatherpackage)
weatherpackage::get_forecast("paris")
visualiser_forecast_h("Paris")
visualiser_forecast_d("paris")
usethis::use_test("unnest_response")
get_forecast <- function(x, y = NULL) {
perform_request <- function(lat, lon) {
url <- "https://api.open-meteo.com/v1/forecast"
response_table <-
httr2::request(url) |>
httr2::req_url_query(latitude = lat, longitude = lon,
hourly = c("temperature_2m",
"apparent_temperature",
"precipitation_probability",
"precipitation"),
.multi = "comma") |>
httr2::req_perform() |>
httr2::resp_body_json() |>
tibble::as_tibble()
return(response_table)
}
unnest_data <- function(resp) {
tibble::tibble(date_heure = unlist(resp$hourly[1][[1]]),
temperature_celsius = unlist(resp$hourly[2][[1]]),
apparent_temperature_celsius = unlist(resp$hourly[3][[1]]),
precipitation_proba = unlist(resp$hourly[4][[1]]),
precipitation = unlist(resp$hourly[5][[1]]))
}
get_gps_coordonnee <- function(adresse) {
adresse_tibble <- tibble::tribble(
~addr,
adresse
) |>
tidygeocoder::geocode(addr)
lat <- adresse_tibble$lat
long <- adresse_tibble$long
coordonnees <- c(lat, long)
return(coordonnees)
}
if (!is.null(y)) {
lat <- x
lon <- y
response <- perform_request(lat, lon)
} else if (is.character(x)) {
coordonnees <- get_gps_coordonnee(x)
lat <- coordonnees[1]
lon <- coordonnees[2]
response <- perform_request(lat, lon)
} else {
stop("erreur")
}
data <- unnest_data(response)
return(data)
}
get_forecast("paris")
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
test_data <- tibble::tibble(
date_heure = c("2024-01-01 12:00", "2024-01-01 13:00"),
temperature_celsius = c(20, 22),
temperature_ressentie_celsius = c(18, 21),
precipitation_proba = c(0.1, 0.2),
precipitation = c(0, 0.5)
)
test_that("la fonction renvoie le bon nombre de lignes", {
result <- unnest_response(test_data)
expect_equal(nrow(result), nrow(test_data))
})
library(testthat)
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
test_data <- tibble::tibble(
date_heure = c("2024-01-01 12:00", "2024-01-01 13:00"),
temperature_celsius = c(20, 22),
temperature_ressentie_celsius = c(18, 21),
precipitation_proba = c(0.1, 0.2),
precipitation = c(0, 0.5)
)
test_that("la fonction renvoie le bon nombre de lignes", {
result <- unnest_response(test_data)
expect_equal(nrow(result), nrow(test_data))
})
get_forecast <- function(x, y = NULL) {
perform_request <- function(lat, lon) {
url <- "https://api.open-meteo.com/v1/forecast"
response_table <-
httr2::request(url) |>
httr2::req_url_query(latitude = lat, longitude = lon,
hourly = c("temperature_2m",
"apparent_temperature",
"precipitation_probability",
"precipitation"),
.multi = "comma") |>
httr2::req_perform() |>
httr2::resp_body_json() |>
tibble::as_tibble()
return(response_table)
}
unnest_data <- function(resp) {
tibble::tibble(date_heure = unlist(resp$hourly[1][[1]]),
temperature_celsius = unlist(resp$hourly[2][[1]]),
apparent_temperature_celsius = unlist(resp$hourly[3][[1]]),
precipitation_proba = unlist(resp$hourly[4][[1]]),
precipitation = unlist(resp$hourly[5][[1]]))
}
get_gps_coordonnee <- function(adresse) {
adresse_tibble <- tibble::tribble(
~addr,
adresse
) |>
tidygeocoder::geocode(addr)
lat <- adresse_tibble$lat
long <- adresse_tibble$long
coordonnees <- c(lat, long)
return(coordonnees)
}
if (!is.null(y)) {
lat <- x
lon <- y
response <- perform_request(lat, lon)
} else if (is.character(x)) {
coordonnees <- get_gps_coordonnee(x)
lat <- coordonnees[1]
lon <- coordonnees[2]
response <- perform_request(lat, lon)
} else {
stop("erreur")
}
data <- unnest_data(response)
return(data)
}
test_that("la fonction renvoie le bon nombre de lignes", {
result <- unnest_response(test_data)
expect_equal(nrow(result), nrow(test_data))
})
data <- tibble::tibble(
date_heure = c("2024-01-01 12:00", "2024-01-01 13:00"),
temperature_celsius = c(20, 22),
temperature_ressentie_celsius = c(18, 21),
precipitation_proba = c(0.1, 0.2),
precipitation = c(0, 0.5)
)
test_that("la fonction renvoie le bon nombre de lignes", {
result <- unnest_data(test_data)
expect_equal(nrow(result), nrow(test_data))
})
test_that("la fonction renvoie le bon nombre de lignes", {
result <- unnest_data(data)
expect_equal(nrow(result), nrow(data))
})
unnest_data <- function(resp) {
tibble::tibble(date_heure = unlist(resp$hourly[1][[1]]),
temperature_celsius = unlist(resp$hourly[2][[1]]),
apparent_temperature_celsius = unlist(resp$hourly[3][[1]]),
precipitation_proba = unlist(resp$hourly[4][[1]]),
precipitation = unlist(resp$hourly[5][[1]]))
}
test_that("la fonction renvoie le bon nombre de lignes", {
result <- unnest_data(data)
expect_equal(nrow(result), nrow(data))
})
test_that("les valeurs de la colonne temperature correspondent aux valeurs proposées en entrée", {
result <- unnest_data(data)
expect_equal(result$temperature_celsius, data$temperature_celsius)
})
unnest_data <- function(resp) {
tibble(date_heure = unlist(resp$hourly[1][[1]]),
temperature_celsius = unlist(resp$hourly[2][[1]]),
apparent_temperature_celsius = unlist(resp$hourly[3][[1]]),
precipitation_proba = unlist(resp$hourly[4][[1]]),
precipitation = unlist(resp$hourly[5][[1]]))}
test_that("la fonction renvoie le bon nombre de lignes", {
result <- unnest_data(data)
expect_equal(nrow(result), nrow(data))
})
test_that("les valeurs de la colonne temperature correspondent aux valeurs proposées en entrée", {
result <- unnest_data(data)
expect_equal(result$temperature_celsius, data$temperature_celsius)
})
test_that("test des noms des colonnes en sortie", {
result <- unnest_data(data)
expect_true("date_heure" %in% colnames(result))
expect_true("temperature_celsius" %in% colnames(result))
expect_true("temperature_ressentie_celsius" %in% colnames(result))
expect_true("precipitation_proba" %in% colnames(result))
expect_true("precipitation" %in% colnames(result))
})
test_that("test du nombre de colonnes en sortie", {
result <- unnest_data(data)
expect_equal(ncol(result), ncol(data))
})
library(tibble)
data <- tibble::tibble(
date_heure = c("2024-01-01 12:00", "2024-01-01 13:00"),
temperature_celsius = c(20, 22),
temperature_ressentie_celsius = c(18, 21),
precipitation_proba = c(0.1, 0.2),
precipitation = c(0, 0.5)
)
test_that("la fonction renvoie le bon nombre de lignes", {
result <- unnest_data(data)
expect_equal(nrow(result), nrow(data))
})
test_that("les valeurs de la colonne temperature correspondent aux valeurs proposées en entrée", {
result <- unnest_data(data)
expect_equal(result$temperature_celsius, data$temperature_celsius)
})
test_that("test des noms des colonnes en sortie", {
result <- unnest_data(data)
expect_true("date_heure" %in% colnames(result))
expect_true("temperature_celsius" %in% colnames(result))
expect_true("temperature_ressentie_celsius" %in% colnames(result))
expect_true("precipitation_proba" %in% colnames(result))
expect_true("precipitation" %in% colnames(result))
})
test_that("test du nombre de colonnes en sortie", {
result <- unnest_data(data)
expect_equal(ncol(result), ncol(data))
})
resp <- perform_request(23.2,2.1)
result <- unnest_response(resp)
resp <- perform_request(23.2,2.1)
result <- unnest_data(resp)
perform_request <- function(lat, lon) {
url <- "https://api.open-meteo.com/v1/forecast"
response_table <-
httr2::request(url) |>
httr2::req_url_query(latitude = lat, longitude = lon,
hourly = c("temperature_2m",
"apparent_temperature",
"precipitation_probability",
"precipitation"),
.multi = "comma") |>
httr2::req_perform() |>
httr2::resp_body_json() |>
tibble::as_tibble()
return(response_table)
}
resp <- perform_request(23.2,2.1)
result <- unnest_data(resp)
test_that("la fonction renvoie le bon nombre de lignes", {
result <- unnest_data(data)
expect_equal(nrow(result), nrow(data))
})
test_that("la fonction renvoie le bon nombre de lignes", {
expect_equal(nrow(result), length(resp$hourly[[1]]))
})
expect_equal(ncol(result), 5)
test_that("test du nombre de colonnes en sortie", {
expect_equal(ncol(result), 5)
})
test_that("test des noms des colonnes en sortie", {
expect_equal(names(result), c("date_heure",
"temperature_celsius",
"apparent_temperature_celsius",
"precipitation_proba",
"precipitation"))
})
test_that("les valeurs de la colonne temperature correspondent aux valeurs proposées en entrée", {
expect_equal(result$temperature_celsius)
})
test_that("les valeurs de la colonne temperature correspondent aux valeurs proposées en entrée", {
expect_equal(result$temperature_celsius, resp$temperature_celsius)
})
test_that("les valeurs de la colonne temperature correspondent aux valeurs proposées en entrée", {
expect_equal(result$temperature_celsius, resp$hourly[[1]])
})
test_that("les valeurs de la colonne temperature correspondent aux valeurs proposées en entrée", {
expect_equal(result$temperature_celsius, unlist(resp$hourly[[1]]))
})
test_that("les valeurs de la colonne temperature correspondent aux valeurs proposées en entrée", {
expect_equal(result$temperature_celsius, resp$hourly[[2]])
})
test_that("les valeurs de la colonne temperature correspondent aux valeurs proposées en entrée", {
expect_equal(result$temperature_celsius, unlist(resp$hourly[[2]]))
})
resp <- perform_request(23.2,2.1)
result <- unnest_data(resp)
test_that("la fonction renvoie le bon nombre de lignes", {
expect_equal(nrow(result), length(resp$hourly[[1]]))
})
test_that("les valeurs de la colonne temperature correspondent aux valeurs proposées en entrée", {
expect_equal(result$temperature_celsius, unlist(resp$hourly[[2]]))
})
test_that("test des noms des colonnes en sortie", {
expect_equal(names(result), c("date_heure",
"temperature_celsius",
"apparent_temperature_celsius",
"precipitation_proba",
"precipitation"))
})
test_that("test du nombre de colonnes en sortie", {
expect_equal(ncol(result), 5)
})
library(weatherpackage)
weatherpackage::get_forecast("paris")
weatherpackage::visualiser_forecast_h("paris")
?visualiser_forecast_d
?visualiser_forecast_h
?get_forecast
?strsplit
devtools::document()
devtools::check()
library(testthat)
library(tibble)
unnest_data <- function(resp) {
tibble::tibble(date_heure = unlist(resp$hourly[1][[1]]),
temperature_celsius = unlist(resp$hourly[2][[1]]),
apparent_temperature_celsius = unlist(resp$hourly[3][[1]]),
precipitation_proba = unlist(resp$hourly[4][[1]]),
precipitation = unlist(resp$hourly[5][[1]]))
}
resp <- perform_request(23.2,2.1)
perform_request <- function(lat, lon) {
url <- "https://api.open-meteo.com/v1/forecast"
response_table <-
httr2::request(url) |>
httr2::req_url_query(latitude = lat, longitude = lon,
hourly = c("temperature_2m",
"apparent_temperature",
"precipitation_probability",
"precipitation"),
.multi = "comma") |>
httr2::req_perform() |>
httr2::resp_body_json() |>
tibble::as_tibble()
return(response_table)
}
unnest_data <- function(resp) {
tibble::tibble(date_heure = unlist(resp$hourly[1][[1]]),
temperature_celsius = unlist(resp$hourly[2][[1]]),
apparent_temperature_celsius = unlist(resp$hourly[3][[1]]),
precipitation_proba = unlist(resp$hourly[4][[1]]),
precipitation = unlist(resp$hourly[5][[1]]))
}
resp <- perform_request(23.2,2.1)
result <- unnest_data(resp)
test_that("la fonction renvoie le bon nombre de lignes", {
expect_equal(nrow(result), length(resp$hourly[[1]]))
})
test_that("les valeurs de la colonne temperature correspondent aux valeurs proposées en entrée", {
expect_equal(result$temperature_celsius, unlist(resp$hourly[[2]]))
})
test_that("test des noms des colonnes en sortie", {
expect_equal(names(result), c("date_heure",
"temperature_celsius",
"apparent_temperature_celsius",
"precipitation_proba",
"precipitation"))
})
test_that("test du nombre de colonnes en sortie", {
expect_equal(ncol(result), 5)
})
devtools::check()
devtools::document()
devtools::build()
library(olympicsWeather)
?olympicsWeather
olympicsWeather::get_forecast("paris")
olympicsWeather::visualiser_forecast_d("paris")
olympicsWeather::visualiser_forecast_h("paris")
?olympicsWeather
devtools::document()
devtools::build()
devtools::check()
devtools::build()
library(olympicsWeather)
?olympicsWeather
library(roxygen2)
roxygenize("C:/Users/emmal/Documents/A- Master 1 ECAP/R avancé et Git/olympicsWeather")
library(olympicsWeather)
?olympicsWeather
??olympicsWeather
?get_forecast
get_forecast("paris")
devtools::document()
devtools::check()
devtools::build()
library(olympicsWeather)
olympicsWeather::get_forecast("paris")
olympicsWeather::get_forecast(23.2,2.1)
visualiser_forecast_d("paris")
visualiser_forecast_h("paris")
visualiser_forecast_d(2.1,2.4)
visualiser_forecast_h(2.1,2.4)
?get_forecast
?visualiser_forecast_d
?visualiser_forecast_h
git clone git@github.com:Emmalabre/olympicsWeather.git
